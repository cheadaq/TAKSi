# Copyright (C) 2018-present ichenq@outlook.com. All rights reserved.
# Distributed under the terms and conditions of the Apache License.
# See accompanying files LICENSE.

GO_HEAD_TEMPLATE = """
// This file is auto-generated by TAKSi v%s, DO NOT EDIT!
package %s

import (
    "encoding/csv"
    "io"
    "log"
    "strings"
)

var (
    _ = io.EOF
    _ = strings.Split
    _ = log.Panicf
)

"""

GO_HEAD_CONST_TEMPLATE = """
const (
    TAKSI_CSV_SEP = "%s"
    TAKSI_CSV_QUOTE = "%s"
    TAKSI_ARRAY_DELIM = "%s"
    TAKSI_MAP_DELIM1 = "%s"
    TAKSI_MAP_DELIM2 = "%s"
)

"""

GO_LOAD_METHOD_TEMPLATE = """
func Load%sList(loader DataSourceLoader) ([]*%s, error) {
    buf, err := loader.LoadDataByKey(%s)
    if err != nil {
        return nil, err
    }
    var list []*%s
    var r = csv.NewReader(buf)
    for i := 0; ; i++ {
        row, err := r.Read()
        if err == io.EOF {
            break
        }
        if err != nil {
            log.Printf("%s: read csv %%v", err)
            return nil, err
        }
        var item %s
        if err := item.ParseFromRow(row); err != nil {
            log.Printf("%s: parse row %%d, %%s, %%v", i+1, row, err)
            return nil, err
        }
        list = append(list, &item)
    }
    return list, nil
}

"""

GO_KV_LOAD_METHOD_TEMPLATE = """
func Load%s(loader DataSourceLoader) (*%s, error) {
    buf, err := loader.LoadDataByKey(%s)
    if err != nil {
    return nil, err
    }
    r := csv.NewReader(buf)
    rows, err := r.ReadAll()
    if err != nil {
        log.Printf("%s: csv read all, %%v", err)
        return nil, err
    }
    var item %s
    if err := item.ParseFromRows(rows); err != nil {
        log.Printf("%s: parse row %%d, %%v", len(rows), err)
        return nil, err
    }
    return &item, nil
}

"""