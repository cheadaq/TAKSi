// This file is auto-generated by TAKSi v1.3.0, DO NOT EDIT!

using System;
using System.IO;
using System.Collections.Generic;

namespace Config
{

// 全局数值配置, 全局变量表.xlsx
public class GlobalPropertyDefine
{
    public double                   GoldExchangeTimeFactor1 = 0.0f;    // 金币兑换时间参数1
    public double                   GoldExchangeTimeFactor2 = 0.0f;    // 金币兑换时间参数2
    public double                   GoldExchangeTimeFactor3 = 0.0f;    // 金币兑换时间参数3
    public ushort                   GoldExchangeResource1Price = 0;    // 金币兑换资源1价格
    public ushort                   GoldExchangeResource2Price = 0;    // 金币兑换资源2价格
    public ushort                   GoldExchangeResource3Price = 0;    // 金币兑换资源3价格
    public ushort                   GoldExchangeResource4Price = 0;    // 金币兑换资源4价格
    public ushort                   FreeCompleteSeconds = 0;           // 免费立即完成时间
    public ushort                   CancelBuildReturnPercent = 0;      // 取消建造后返还资源比例
    public bool                     EnableSearch = false;              // 开启搜索
    public int[]                    SpawnLevelLimit = null;            // 最大刷新个数显示
    public Dictionary<string, int>  FirstRechargeReward = null;        // 首充奖励

    public static GlobalPropertyDefine Instance { get; private set; }

    // parse object fields from text rows
    public void ParseFromRows(List<List<string>> rows)
    {
        if (rows.Count < 12) {
            throw new ArgumentException(string.Format("GlobalPropertyDefine: row length out of index, {0} < 12", rows.Count));
        }
        if (rows[0][3].Length > 0) {
            this.GoldExchangeTimeFactor1 = double.Parse(rows[0][3]);
        }
        if (rows[1][3].Length > 0) {
            this.GoldExchangeTimeFactor2 = double.Parse(rows[1][3]);
        }
        if (rows[2][3].Length > 0) {
            this.GoldExchangeTimeFactor3 = double.Parse(rows[2][3]);
        }
        if (rows[3][3].Length > 0) {
            this.GoldExchangeResource1Price = ushort.Parse(rows[3][3]);
        }
        if (rows[4][3].Length > 0) {
            this.GoldExchangeResource2Price = ushort.Parse(rows[4][3]);
        }
        if (rows[5][3].Length > 0) {
            this.GoldExchangeResource3Price = ushort.Parse(rows[5][3]);
        }
        if (rows[6][3].Length > 0) {
            this.GoldExchangeResource4Price = ushort.Parse(rows[6][3]);
        }
        if (rows[7][3].Length > 0) {
            this.FreeCompleteSeconds = ushort.Parse(rows[7][3]);
        }
        if (rows[8][3].Length > 0) {
            this.CancelBuildReturnPercent = ushort.Parse(rows[8][3]);
        }
        if (rows[9][3].Length > 0) {
            this.EnableSearch = AutogenConfigManager.ParseBool(rows[9][3]);
        }
        {
            var items = rows[10][3].Split(AutogenConfigManager.TAKSI_ARRAY_DELIM, StringSplitOptions.RemoveEmptyEntries);
            this.SpawnLevelLimit = new int[items.Length];
            for(int i = 0; i < items.Length; i++) 
            {
                var value = int.Parse(items[i]);
                this.SpawnLevelLimit[i] = value;
            }
        }
        {
            var items = rows[11][3].Split(AutogenConfigManager.TAKSI_MAP_DELIM1, StringSplitOptions.RemoveEmptyEntries);
            this.FirstRechargeReward = new Dictionary<string,int>();
            for(int i = 0; i < items.Length; i++) 
            {
                string text = items[i];
                if (text.Length == 0) {
                    continue;
                }
                var item = text.Split(AutogenConfigManager.TAKSI_MAP_DELIM2, StringSplitOptions.RemoveEmptyEntries);
                if (items.Length == 2) {
                var key = item[0].Trim();
                var value = int.Parse(item[1]);
                    this.FirstRechargeReward[key] = value;
                }
            }
        }
    }

public static void LoadFromLines(List<string> lines)
{
    var rows = new List<List<string>>();
    for(int i = 0; i < lines.Count; i++)
    {
        var row = AutogenConfigManager.ReadRecordFromLine(lines[i]);
        rows.Add(row);
    }
    Instance = new GlobalPropertyDefine();
    Instance.ParseFromRows(rows);
}
}


public class AutogenConfigManager 
{    
    public const char CSV_SEP = ',';           // CSV field delimiter
    public const char CSV_QUOTE = '"';          // CSV field quote
    public const char TAKSI_ARRAY_DELIM = ','; 
    public const char TAKSI_MAP_DELIM1 = ';';
    public const char TAKSI_MAP_DELIM2 = '=';
    
    public delegate void ContentReader(string filepath, Action<string> callback);
    public static ContentReader reader = ReadFileContent;

    public static bool ParseBool(string text)
    {
        if (text.Length > 0)
        {
            return string.Equals(text, "1") ||
                string.Equals(text, "y", StringComparison.OrdinalIgnoreCase) ||
                string.Equals(text, "on", StringComparison.OrdinalIgnoreCase) ||
                string.Equals(text, "yes", StringComparison.OrdinalIgnoreCase) ||
                string.Equals(text, "true", StringComparison.OrdinalIgnoreCase);
        }
        return false;
    }

    // 读取文件内容
    public static void ReadFileContent(string filepath, Action<string> cb)
    {
        StreamReader reader = new StreamReader(filepath);
        var content = reader.ReadToEnd();
        cb(content);
    }
    
    // 把内容分行
    public static List<string> ReadTextToLines(string content)
    {
        List<string> lines = new List<string>();
        using (StringReader reader = new StringReader(content))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                lines.Add(line);
            }
        }
        return lines;
    }

    // 从一行读取record
    public static List<string> ReadRecordFromLine(string line)
    {
        List<string> row = new List<string>();
        int pos = 0;
        while (pos < line.Length)
        {
            string field = "";
            pos = ParseNextColumn(line, pos, out field);
            row.Add(field.Trim());
            if (pos < 0)
            {
                break;
            }
        }
        return row;
    }
        
    // 解析下一个column
    public static int ParseNextColumn(string line, int start, out string field)
    {
        bool in_quote = false;
        if (line[start] == CSV_QUOTE)
        {
            in_quote = true;
            start++;
        }
        int pos = start;
        for (; pos < line.Length; pos++)
        {
            if (in_quote && line[pos] == CSV_QUOTE)
            {
                if (pos + 1 < line.Length && line[pos + 1] == CSV_SEP)
                {
                    field = line.Substring(start, pos - start);
                    return pos + 2;
                }
                else
                {
                    field = line.Substring(start, pos - start);
                    return pos + 1;
                }
            }
            if (!in_quote && line[pos] == CSV_SEP)
            {
                field = line.Substring(start, pos - start);
                return pos + 1;
            }
        }
        field = line.Substring(start, pos);
        return -1;
    }

    public static void LoadAllConfig(Action completeFunc) 
    {
        reader("global_property_define.csv", (content) =>
        {
            var lines = ReadTextToLines(content);
            GlobalPropertyDefine.LoadFromLines(lines);

            if (completeFunc != null) completeFunc();
        });

    }
}


}
