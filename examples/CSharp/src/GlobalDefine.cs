// This file is auto-generated by Tabugen v0.9.1, DO NOT EDIT!

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace Config
{
//  全局变量表.xlsx
public struct GlobalPropertyDefine 
{
    public double GoldExchangeTimeFactor1 { get; set; } // 金币兑换时间参数1
    public double GoldExchangeTimeFactor2 { get; set; } // 金币兑换时间参数2
    public double GoldExchangeTimeFactor3 { get; set; } // 金币兑换时间参数3
    public ushort GoldExchangeResource1Price { get; set; } // 金币兑换资源1价格
    public ushort GoldExchangeResource2Price { get; set; } // 金币兑换资源2价格
    public ushort GoldExchangeResource3Price { get; set; } // 金币兑换资源3价格
    public ushort GoldExchangeResource4Price { get; set; } // 金币兑换资源4价格
    public ushort FreeCompleteSeconds { get; set; }  // 免费立即完成时间
    public ushort CancelBuildReturnPercent { get; set; } // 取消建造后返还资源比例
    public bool EnableSearch { get; set; }         // 开启搜索
    public int[]? SpawnLevelLimit { get; set; }      // 最大刷新个数显示
    public Dictionary<string, int>? FirstRechargeReward { get; set; }  // 首充奖励
    public Dictionary<int, int>? VIPItemReward { get; set; }        // VIP奖励

    // parse GlobalPropertyDefine from string fields
    public void ParseFrom(Dictionary<string, string> fields)
    {
        this.GoldExchangeTimeFactor1 = float.Parse(fields["GoldExchangeTimeFactor1"]);
        this.GoldExchangeTimeFactor2 = float.Parse(fields["GoldExchangeTimeFactor2"]);
        this.GoldExchangeTimeFactor3 = float.Parse(fields["GoldExchangeTimeFactor3"]);
        this.GoldExchangeResource1Price = ushort.Parse(fields["GoldExchangeResource1Price"]);
        this.GoldExchangeResource2Price = ushort.Parse(fields["GoldExchangeResource2Price"]);
        this.GoldExchangeResource3Price = ushort.Parse(fields["GoldExchangeResource3Price"]);
        this.GoldExchangeResource4Price = ushort.Parse(fields["GoldExchangeResource4Price"]);
        this.FreeCompleteSeconds = ushort.Parse(fields["FreeCompleteSeconds"]);
        this.CancelBuildReturnPercent = ushort.Parse(fields["CancelBuildReturnPercent"]);
        this.EnableSearch = bool.Parse(fields["EnableSearch"]);
        {
            var listVal = new List<int>();
            var strArr = fields["SpawnLevelLimit"].Split("|", StringSplitOptions.RemoveEmptyEntries);
            for(int i = 0; i < strArr.Length; i++) 
            {
                listVal.Add(int.Parse(strArr[i]));
            }
            this.SpawnLevelLimit = listVal.ToArray();
        }
        {
            var mapVal = new Dictionary<string, int>();
            var kvList = fields["FirstRechargeReward"].Split("|", StringSplitOptions.RemoveEmptyEntries);
            for(int i = 0; i < kvList.Length; i++) 
            {
                var pair = kvList[i].Split("=", StringSplitOptions.RemoveEmptyEntries);
                if (pair.Length == 2) {
                    var key = pair[0].Trim();
                    var val = int.Parse(pair[1]);
                    mapVal[key] = val;
                }
            }
            this.FirstRechargeReward = mapVal;
        }
        {
            var mapVal = new Dictionary<int, int>();
            var kvList = fields["VIPItemReward"].Split("|", StringSplitOptions.RemoveEmptyEntries);
            for(int i = 0; i < kvList.Length; i++) 
            {
                var pair = kvList[i].Split("=", StringSplitOptions.RemoveEmptyEntries);
                if (pair.Length == 2) {
                    var key = int.Parse(pair[0]);
                    var val = int.Parse(pair[1]);
                    mapVal[key] = val;
                }
            }
            this.VIPItemReward = mapVal;
        }
    }

}

} // namespace Config 
