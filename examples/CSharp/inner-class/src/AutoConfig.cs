// This file is auto-generated by TAKSi v1.3.0, DO NOT EDIT!

using System;
using System.IO;
using System.Collections.Generic;

namespace Config
{

public class ProbabilityGoodsDefine 
{
    public string GoodsID = "";       // 物品1id
    public uint Num = 0;            // 物品1数量
    public uint Probability = 0;    // 物品1概率
};

// , 随机宝箱.xlsx
public class BoxProbabilityDefine
{
    public string                    ID = "";             // ID
    public int                       Total = 0;           // 奖励总数
    public int                       Time = 0;            // 冷却时间
    public bool                      Repeat = false;      // 是否可重复
    public ProbabilityGoodsDefine[] ProbabilityGoods = null; 

    public static BoxProbabilityDefine[] Data { get; private set; } 

    // parse object fields from a text row
    public void ParseFromRow(List<string> row)
    {
        if (row.Count < 13) {
            throw new ArgumentException(string.Format("BoxProbabilityDefine: row length too short {0}", row.Count));
        }
        if (row[0].Length > 0) {
            this.ID = row[0].Trim();
        }
        if (row[1].Length > 0) {
            this.Total = int.Parse(row[1]);
        }
        if (row[2].Length > 0) {
            this.Time = int.Parse(row[2]);
        }
        if (row[3].Length > 0) {
            this.Repeat = AutogenConfigManager.ParseBool(row[3]);
        }
        this.ProbabilityGoods = new ProbabilityGoodsDefine[3];
        for (int i = 4, j = 0; i < 13; i += 3, j++) 
        {
            ProbabilityGoodsDefine item = new ProbabilityGoodsDefine();
            if (row[i + 0].Length > 0) 
            {
                item.GoodsID = row[i + 0].Trim();
            }
            if (row[i + 1].Length > 0) 
            {
                item.Num = uint.Parse(row[i + 1]);
            }
            if (row[i + 2].Length > 0) 
            {
                item.Probability = uint.Parse(row[i + 2]);
            }
            this.ProbabilityGoods[j] = item;
        }
    }

    public static void LoadFromLines(List<string> lines)
    {
        var list = new BoxProbabilityDefine[lines.Count];
        for(int i = 0; i < lines.Count; i++)
        {
            var row = AutogenConfigManager.ReadRecordFromLine(lines[i]);
            var obj = new BoxProbabilityDefine();
            obj.ParseFromRow(row);
            list[i] = obj;
        }
        Data = list;
    }

    // get an item by key
    public static BoxProbabilityDefine Get(string ID)
    {
        foreach (BoxProbabilityDefine item in Data)
        {
            if (item.ID == ID)
            {
                return item;
            }
        }
        return null;
    }
}


public class AutogenConfigManager 
{    
    public const char CSV_SEP = ',';           // CSV field delimiter
    public const char CSV_QUOTE = '"';          // CSV field quote
    public const char TAKSI_ARRAY_DELIM = ','; 
    public const char TAKSI_MAP_DELIM1 = ';';
    public const char TAKSI_MAP_DELIM2 = '=';
    
    public delegate void ContentReader(string filepath, Action<string> callback);
    public static ContentReader reader = ReadFileContent;

    public static bool ParseBool(string text)
    {
        if (text.Length > 0)
        {
            return string.Equals(text, "1") ||
                string.Equals(text, "y", StringComparison.OrdinalIgnoreCase) ||
                string.Equals(text, "on", StringComparison.OrdinalIgnoreCase) ||
                string.Equals(text, "yes", StringComparison.OrdinalIgnoreCase) ||
                string.Equals(text, "true", StringComparison.OrdinalIgnoreCase);
        }
        return false;
    }

    // 读取文件内容
    public static void ReadFileContent(string filepath, Action<string> cb)
    {
        StreamReader reader = new StreamReader(filepath);
        var content = reader.ReadToEnd();
        cb(content);
    }
    
    // 把内容分行
    public static List<string> ReadTextToLines(string content)
    {
        List<string> lines = new List<string>();
        using (StringReader reader = new StringReader(content))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                lines.Add(line);
            }
        }
        return lines;
    }

    // 从一行读取record
    public static List<string> ReadRecordFromLine(string line)
    {
        List<string> row = new List<string>();
        int pos = 0;
        while (pos < line.Length)
        {
            string field = "";
            pos = ParseNextColumn(line, pos, out field);
            row.Add(field.Trim());
            if (pos < 0)
            {
                break;
            }
        }
        return row;
    }
        
    // 解析下一个column
    public static int ParseNextColumn(string line, int start, out string field)
    {
        bool in_quote = false;
        if (line[start] == CSV_QUOTE)
        {
            in_quote = true;
            start++;
        }
        int pos = start;
        for (; pos < line.Length; pos++)
        {
            if (in_quote && line[pos] == CSV_QUOTE)
            {
                if (pos + 1 < line.Length && line[pos + 1] == CSV_SEP)
                {
                    field = line.Substring(start, pos - start);
                    return pos + 2;
                }
                else
                {
                    field = line.Substring(start, pos - start);
                    return pos + 1;
                }
            }
            if (!in_quote && line[pos] == CSV_SEP)
            {
                field = line.Substring(start, pos - start);
                return pos + 1;
            }
        }
        field = line.Substring(start, pos);
        return -1;
    }

    public static void LoadAllConfig(Action completeFunc) 
    {
        reader("box_probability_define.csv", (content) =>
        {
            var lines = ReadTextToLines(content);
            BoxProbabilityDefine.LoadFromLines(lines);

            if (completeFunc != null) completeFunc();
        });

    }
}


}
