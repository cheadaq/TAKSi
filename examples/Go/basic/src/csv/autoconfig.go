// This file is auto-generated by Tabugen v0.6.12, DO NOT EDIT!
package config

import (
	"log"
	"reflect"
	"strings"
)

var (
	_ = log.Panicf
	_ = reflect.TypeOf
	_ = strings.Split
)

const (
	TABUGEN_CSV_SEP     = `,` // CSV field delimiter
	TABUGEN_CSV_QUOTE   = `"` // CSV field quote
	TABUGEN_ARRAY_DELIM = `,` // array item delimiter
	TABUGEN_MAP_DELIM1  = `;` // map item delimiter
	TABUGEN_MAP_DELIM2  = `=` // map key-value delimiter
)

// 兵种属性配置, 兵种.xlsx
type SoldierPropertyDefine struct {
	Name               string  // 士兵ID
	Level              int     // 士兵等级
	NameID             string  // 名字
	Description        string  // 描述
	BuildingName       string  // 所属建筑
	BuildingLevel      uint32  // 建筑等级
	RequireSpace       uint32  // 登陆艇占用空间
	UpgradeTime        uint32  // 升级消耗的时间(秒）
	UpgradeMaterialID  string  // 升级消耗的材料
	UpgradeMaterialNum int64   // 升级消耗的数量
	ConsumeMaterial    string  // 生产消耗的材料
	ConsumeMaterialNum int     // 生产消耗的数量
	ConsumeTime        int     // 生产消耗的时间（秒/个）
	Act                int     // 攻击
	Hp                 int     // 血量
	BombLoad           int16   // 载弹量
	Duration           float32 // 持续时间
	TriggerInterval    float32 // 触发间隔
	SearchScope        int16   // 搜索范围
	AtkFrequency       float32 // 攻击间隔
	AtkRange           float64 // 攻击距离
	MovingSpeed        float64 // 移动速度
	EnableBurn         bool    // 燃烧特效
}

func (p *SoldierPropertyDefine) ParseFromRow(row []string) error {
	if len(row) < 23 {
		log.Panicf("SoldierPropertyDefine: row length too short %d", len(row))
	}
	if row[0] != "" {
		p.Name = row[0]
	}
	if row[1] != "" {
		var value = parseStringAs(reflect.Int, row[1])
		p.Level = value.(int)
	}
	if row[2] != "" {
		p.NameID = row[2]
	}
	if row[3] != "" {
		p.Description = row[3]
	}
	if row[4] != "" {
		p.BuildingName = row[4]
	}
	if row[5] != "" {
		var value = parseStringAs(reflect.Uint32, row[5])
		p.BuildingLevel = value.(uint32)
	}
	if row[6] != "" {
		var value = parseStringAs(reflect.Uint32, row[6])
		p.RequireSpace = value.(uint32)
	}
	if row[7] != "" {
		var value = parseStringAs(reflect.Uint32, row[7])
		p.UpgradeTime = value.(uint32)
	}
	if row[8] != "" {
		p.UpgradeMaterialID = row[8]
	}
	if row[9] != "" {
		var value = parseStringAs(reflect.Int64, row[9])
		p.UpgradeMaterialNum = value.(int64)
	}
	if row[10] != "" {
		p.ConsumeMaterial = row[10]
	}
	if row[11] != "" {
		var value = parseStringAs(reflect.Int, row[11])
		p.ConsumeMaterialNum = value.(int)
	}
	if row[12] != "" {
		var value = parseStringAs(reflect.Int, row[12])
		p.ConsumeTime = value.(int)
	}
	if row[13] != "" {
		var value = parseStringAs(reflect.Int, row[13])
		p.Act = value.(int)
	}
	if row[14] != "" {
		var value = parseStringAs(reflect.Int, row[14])
		p.Hp = value.(int)
	}
	if row[15] != "" {
		var value = parseStringAs(reflect.Int16, row[15])
		p.BombLoad = value.(int16)
	}
	if row[16] != "" {
		var value = parseStringAs(reflect.Float32, row[16])
		p.Duration = value.(float32)
	}
	if row[17] != "" {
		var value = parseStringAs(reflect.Float32, row[17])
		p.TriggerInterval = value.(float32)
	}
	if row[18] != "" {
		var value = parseStringAs(reflect.Int16, row[18])
		p.SearchScope = value.(int16)
	}
	if row[19] != "" {
		var value = parseStringAs(reflect.Float32, row[19])
		p.AtkFrequency = value.(float32)
	}
	if row[20] != "" {
		var value = parseStringAs(reflect.Float64, row[20])
		p.AtkRange = value.(float64)
	}
	if row[21] != "" {
		var value = parseStringAs(reflect.Float64, row[21])
		p.MovingSpeed = value.(float64)
	}
	if row[22] != "" {
		var value = parseStringAs(reflect.Bool, row[22])
		p.EnableBurn = value.(bool)
	}
	return nil
}
