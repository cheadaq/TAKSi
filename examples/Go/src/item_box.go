// This file is auto-generated by Tabugen v1.1.0, DO NOT EDIT!

package config

import (
	"fmt"
	"strings"
)

var _ = fmt.Println
var _ = strings.TrimSpace

type ItemBoxDefine struct {
	ID           string
	Total        int32
	Time         int32
	Repeat       string
	GoodsIDs     []string
	Nums         []int32
	Probabilitys []int32
}

func (p *ItemBoxDefine) ParseRow(table *GDTable, row int) error {
	p.ID = strings.TrimSpace(table.GetCell("ID", row))
	p.Total = ParseI32(table.GetCell("Total", row))
	p.Time = ParseI32(table.GetCell("Time", row))
	p.Repeat = strings.TrimSpace(table.GetCell("Repeat", row))
	for col := 0; col < table.ColSize(); col++ {
		var name = fmt.Sprintf("GoodsID[%d]", col)
		if !table.HasColumn(name) {
			break
		}
		var elem = strings.TrimSpace(table.GetCell(name, row))
		p.GoodsIDs = append(p.GoodsIDs, elem)
	}
	for col := 0; col < table.ColSize(); col++ {
		var name = fmt.Sprintf("Num[%d]", col)
		if !table.HasColumn(name) {
			break
		}
		var elem = ParseI32(table.GetCell(name, row))
		p.Nums = append(p.Nums, elem)
	}
	for col := 0; col < table.ColSize(); col++ {
		var name = fmt.Sprintf("Probability[%d]", col)
		if !table.HasColumn(name) {
			break
		}
		var elem = ParseI32(table.GetCell(name, row))
		p.Probabilitys = append(p.Probabilitys, elem)
	}
	return nil
}
