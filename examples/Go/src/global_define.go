// This file is auto-generated by Tabugen v0.10.0, DO NOT EDIT!
package config

import (
	"fmt"
	"log"
	"strconv"
	"strings"
)

var (
	_ = log.Panicf
	_ = strings.Split
	_ = strconv.Itoa
	_ = fmt.Sprintf
)

//  全局变量表.xlsx
type GlobalPropertyDefine struct {
	GoldExchangeTimeFactor1    float64        // 金币兑换时间参数1
	GoldExchangeTimeFactor2    float64        // 金币兑换时间参数2
	GoldExchangeTimeFactor3    float64        // 金币兑换时间参数3
	GoldExchangeResource1Price uint16         // 金币兑换资源1价格
	GoldExchangeResource2Price uint16         // 金币兑换资源2价格
	GoldExchangeResource3Price uint16         // 金币兑换资源3价格
	GoldExchangeResource4Price uint16         // 金币兑换资源4价格
	FreeCompleteSeconds        uint16         // 免费立即完成时间
	CancelBuildReturnPercent   uint16         // 取消建造后返还资源比例
	EnableSearch               bool           // 开启搜索
	SpawnLevelLimit            []int          // 最大刷新个数显示
	FirstRechargeReward        map[string]int // 首充奖励
	VIPItemReward              map[int]int    // VIP奖励
}

func (p *GlobalPropertyDefine) ParseFrom(fields map[string]string) error {
	p.GoldExchangeTimeFactor1 = parseF64(fields["GoldExchangeTimeFactor1"])
	p.GoldExchangeTimeFactor2 = parseF64(fields["GoldExchangeTimeFactor2"])
	p.GoldExchangeTimeFactor3 = parseF64(fields["GoldExchangeTimeFactor3"])
	p.GoldExchangeResource1Price = parseU16(fields["GoldExchangeResource1Price"])
	p.GoldExchangeResource2Price = parseU16(fields["GoldExchangeResource2Price"])
	p.GoldExchangeResource3Price = parseU16(fields["GoldExchangeResource3Price"])
	p.GoldExchangeResource4Price = parseU16(fields["GoldExchangeResource4Price"])
	p.FreeCompleteSeconds = parseU16(fields["FreeCompleteSeconds"])
	p.CancelBuildReturnPercent = parseU16(fields["CancelBuildReturnPercent"])
	p.EnableSearch = parseBool(fields["EnableSearch"])
	if text := fields["SpawnLevelLimit"]; text != "" {
		var strArr = strings.Split(text, "|")
		var arr = make([]int, 0, len(strArr))
		for _, s := range strArr {
			var val = parseInt(s)
			arr = append(arr, val)
		}
		p.SpawnLevelLimit = arr
	}
	if text := fields["FirstRechargeReward"]; text != "" {
		var kvList = strings.Split(text, "|")
		var dict = make(map[string]int, len(kvList))
		for _, kv := range kvList {
			if kv != "" {
				var pair = strings.Split(kv, "=")
				var key = strings.TrimSpace(pair[0])
				var val = parseInt(pair[1])
				dict[key] = val
			}
		}
		p.FirstRechargeReward = dict
	}
	if text := fields["VIPItemReward"]; text != "" {
		var kvList = strings.Split(text, "|")
		var dict = make(map[int]int, len(kvList))
		for _, kv := range kvList {
			if kv != "" {
				var pair = strings.Split(kv, "=")
				var key = parseInt(pair[0])
				var val = parseInt(pair[1])
				dict[key] = val
			}
		}
		p.VIPItemReward = dict
	}
	return nil
}
