// This file is auto-generated by TAKSi v1.3.0, DO NOT EDIT!
package config

import (
	"bytes"
	"encoding/csv"
	"io"
	"log"
	"strconv"
	"strings"
)

var (
	_ = io.EOF
	_ = strings.Split
	_ = log.Panicf
	_ = strconv.Atoi
	_ = bytes.NewReader
	_ = csv.NewReader
)

const (
	TAKSI_CSV_SEP     = `,`
	TAKSI_CSV_QUOTE   = `"`
	TAKSI_ARRAY_DELIM = `,`
	TAKSI_MAP_DELIM1  = `;`
	TAKSI_MAP_DELIM2  = `=`
)

const (
	KeyBoxProbabilityDefineName = "box_probability_define"
)

type ProbabilityGoodsDefine struct {
	GoodsID     string // 物品1id
	Num         uint32 // 物品1数量
	Probability uint32 // 物品1概率
}

// , 随机宝箱.xlsx
type BoxProbabilityDefine struct {
	ID               string                   // ID
	Total            int                      // 奖励总数
	Time             int                      // 冷却时间
	Repeat           bool                     // 是否可重复
	ProbabilityGoods []ProbabilityGoodsDefine //
}

func (p *BoxProbabilityDefine) ParseFromRow(row []string) error {
	if len(row) < 13 {
		log.Panicf("BoxProbabilityDefine: row length too short %d", len(row))
	}
	if row[0] != "" {
		p.ID = row[0]
	}
	if row[1] != "" {
		var value = MustParseTextValue("int", row[1], row)
		p.Total = value.(int)
	}
	if row[2] != "" {
		var value = MustParseTextValue("int", row[2], row)
		p.Time = value.(int)
	}
	if row[3] != "" {
		var value = MustParseTextValue("bool", row[3], row)
		p.Repeat = value.(bool)
	}
	for i := 4; i < 13; i += 3 {
		var item ProbabilityGoodsDefine
		if row[i+0] != "" {
			item.GoodsID = row[i+0]
		}
		if row[i+1] != "" {
			var value = MustParseTextValue("uint32", row[i+1], row)
			item.Num = value.(uint32)
		}
		if row[i+2] != "" {
			var value = MustParseTextValue("uint32", row[i+2], row)
			item.Probability = value.(uint32)
		}
		p.ProbabilityGoods = append(p.ProbabilityGoods, item)
	}
	return nil
}

func LoadBoxProbabilityDefineList(data []byte) ([]*BoxProbabilityDefine, error) {
	var list []*BoxProbabilityDefine
	var r = csv.NewReader(bytes.NewReader(data))
	for i := 0; ; i++ {
		row, err := r.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Printf("BoxProbabilityDefine: read csv %v", err)
			return nil, err
		}
		var item BoxProbabilityDefine
		if err := item.ParseFromRow(row); err != nil {
			log.Printf("BoxProbabilityDefine: parse row %d, %s, %v", i+1, row, err)
			return nil, err
		}
		list = append(list, &item)
	}
	return list, nil
}

// parse bool value from text
func parseBool(text string) bool {
	switch len(text) {
	case 0:
		return false
	case 1:
		return text[0] == '1' || text[0] == 'Y' || text[0] == 'y'
	case 2:
		var value = strings.ToLower(text)
		return value == "on"
	case 3:
		var value = strings.ToLower(text)
		return value == "yes"
	case 4:
		var value = strings.ToLower(text)
		return value == "true"
	default:
		b, err := strconv.ParseBool(text)
		if err != nil {
			log.Panicf("%v, %v", text, err)
		}
		return b
	}
}

// MustParseTextValue parse text to value of type
func MustParseTextValue(typename, valueText string, msgtips interface{}) interface{} {
	switch typename {
	case "bool":
		return parseBool(valueText)

	case "float32", "float64":
		f, err := strconv.ParseFloat(valueText, 64)
		if err != nil {
			log.Panicf("%s %s, %v, %v", typename, valueText, err, msgtips)
		}
		if typename == "float32" {
			return float32(f)
		}
		return f // float64

	case "uint", "uint8", "uint16", "uint32", "uint64":
		n, err := strconv.ParseUint(valueText, 10, 64)
		if err != nil {
			log.Panicf("%s %s, %v, %v", typename, valueText, err, msgtips)
		}
		if typename == "uint" {
			return uint(n)
		} else if typename == "uint8" {
			return uint8(n)
		} else if typename == "uint16" {
			return uint16(n)
		} else if typename == "uint32" {
			return uint32(n)
		}
		return n // uint64

	case "int", "int8", "int16", "int32", "int64":
		n, err := strconv.ParseInt(valueText, 10, 64)
		if err != nil {
			log.Panicf("%s %s, %v, %v", typename, valueText, err, msgtips)
		}
		if typename == "int" {
			return int(n)
		} else if typename == "int8" {
			return int8(n)
		} else if typename == "int16" {
			return int16(n)
		} else if typename == "int32" {
			return int32(n)
		}
		return n // int64

	default:
		return valueText
	}
}
