// This file is auto-generated by TAKSi v1.3.0, DO NOT EDIT!
package config

import (
	"bytes"
	"encoding/csv"
	"io"
	"log"
	"strconv"
	"strings"
)

var (
	_ = io.EOF
	_ = strings.Split
	_ = log.Panicf
	_ = strconv.Atoi
	_ = bytes.NewReader
	_ = csv.NewReader
)

const (
	TAKSI_CSV_SEP     = `,`
	TAKSI_CSV_QUOTE   = `"`
	TAKSI_ARRAY_DELIM = `,`
	TAKSI_MAP_DELIM1  = `;`
	TAKSI_MAP_DELIM2  = `=`
)

const (
	KeyNewbieGuideDefineName = "newbie_guide_define"
)

// 新手引导配置, 新手任务.xlsx
type NewbieGuideDefine struct {
	Name           string            // ID
	Type           string            // 任务类型
	Target         string            // 目标
	Accomplishment []int16           // 完成步骤
	Goods          map[string]uint32 // 物品
	Description    string            // 描述
}

func (p *NewbieGuideDefine) ParseFromRow(row []string) error {
	if len(row) < 6 {
		log.Panicf("NewbieGuideDefine: row length too short %d", len(row))
	}
	if row[0] != "" {
		p.Name = row[0]
	}
	if row[1] != "" {
		p.Type = row[1]
	}
	if row[2] != "" {
		p.Target = row[2]
	}
	if row[3] != "" {
		for _, item := range strings.Split(row[3], TAKSI_ARRAY_DELIM) {
			var value = MustParseTextValue("int16", item, row[3])
			p.Accomplishment = append(p.Accomplishment, value.(int16))
		}
	}
	if row[4] != "" {
		p.Goods = map[string]uint32{}
		for _, text := range strings.Split(row[4], TAKSI_MAP_DELIM1) {
			if text == "" {
				continue
			}
			var items = strings.Split(text, TAKSI_MAP_DELIM2)
			var value = MustParseTextValue("string", items[0], row[4])
			var key = value.(string)
			value = MustParseTextValue("uint32", items[1], row[4])
			var val = value.(uint32)
			p.Goods[key] = val
		}
	}
	if row[5] != "" {
		p.Description = row[5]
	}
	return nil
}

func LoadNewbieGuideDefineList(data []byte) ([]*NewbieGuideDefine, error) {
	var list []*NewbieGuideDefine
	var r = csv.NewReader(bytes.NewReader(data))
	for i := 0; ; i++ {
		row, err := r.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Printf("NewbieGuideDefine: read csv %v", err)
			return nil, err
		}
		var item NewbieGuideDefine
		if err := item.ParseFromRow(row); err != nil {
			log.Printf("NewbieGuideDefine: parse row %d, %s, %v", i+1, row, err)
			return nil, err
		}
		list = append(list, &item)
	}
	return list, nil
}

// parse bool value from text
func parseBool(text string) bool {
	switch len(text) {
	case 0:
		return false
	case 1:
		return text[0] == '1' || text[0] == 'Y' || text[0] == 'y'
	case 2:
		var value = strings.ToLower(text)
		return value == "on"
	case 3:
		var value = strings.ToLower(text)
		return value == "yes"
	case 4:
		var value = strings.ToLower(text)
		return value == "true"
	default:
		b, err := strconv.ParseBool(text)
		if err != nil {
			log.Panicf("%v, %v", text, err)
		}
		return b
	}
}

// MustParseTextValue parse text to value of type
func MustParseTextValue(typename, valueText string, msgtips interface{}) interface{} {
	switch typename {
	case "bool":
		return parseBool(valueText)

	case "float32", "float64":
		f, err := strconv.ParseFloat(valueText, 64)
		if err != nil {
			log.Panicf("%s %s, %v, %v", typename, valueText, err, msgtips)
		}
		if typename == "float32" {
			return float32(f)
		}
		return f // float64

	case "uint", "uint8", "uint16", "uint32", "uint64":
		n, err := strconv.ParseUint(valueText, 10, 64)
		if err != nil {
			log.Panicf("%s %s, %v, %v", typename, valueText, err, msgtips)
		}
		if typename == "uint" {
			return uint(n)
		} else if typename == "uint8" {
			return uint8(n)
		} else if typename == "uint16" {
			return uint16(n)
		} else if typename == "uint32" {
			return uint32(n)
		}
		return n // uint64

	case "int", "int8", "int16", "int32", "int64":
		n, err := strconv.ParseInt(valueText, 10, 64)
		if err != nil {
			log.Panicf("%s %s, %v, %v", typename, valueText, err, msgtips)
		}
		if typename == "int" {
			return int(n)
		} else if typename == "int8" {
			return int8(n)
		} else if typename == "int16" {
			return int16(n)
		} else if typename == "int32" {
			return int32(n)
		}
		return n // int64

	default:
		return valueText
	}
}
