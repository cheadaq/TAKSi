// This file is auto-generated by Tabugen v0.6.12, DO NOT EDIT!
package config

import (
	"log"
	"reflect"
	"strings"
)

var (
	_ = log.Panicf
	_ = reflect.TypeOf
	_ = strings.Split
)

const (
	TABUGEN_CSV_SEP     = `,` // CSV field delimiter
	TABUGEN_CSV_QUOTE   = `"` // CSV field quote
	TABUGEN_ARRAY_DELIM = `,` // array item delimiter
	TABUGEN_MAP_DELIM1  = `;` // map item delimiter
	TABUGEN_MAP_DELIM2  = `=` // map key-value delimiter
)

// 新手引导配置, 新手任务.xlsx
type NewbieGuideDefine struct {
	Name           string            // ID
	Type           string            // 任务类型
	Target         string            // 目标
	Accomplishment []int16           // 完成步骤
	Goods          map[string]uint32 // 物品
	Description    string            // 描述
}

func (p *NewbieGuideDefine) ParseFromRow(row []string) error {
	if len(row) < 6 {
		log.Panicf("NewbieGuideDefine: row length too short %d", len(row))
	}
	if row[0] != "" {
		p.Name = row[0]
	}
	if row[1] != "" {
		p.Type = row[1]
	}
	if row[2] != "" {
		p.Target = row[2]
	}
	if row[3] != "" {
		for _, item := range strings.Split(row[3], TABUGEN_ARRAY_DELIM) {
			var value = parseStringAs(reflect.Int16, item)
			p.Accomplishment = append(p.Accomplishment, value.(int16))
		}
	}
	if row[4] != "" {
		p.Goods = map[string]uint32{}
		for _, text := range strings.Split(row[4], TABUGEN_MAP_DELIM1) {
			if text == "" {
				continue
			}
			var items = strings.Split(text, TABUGEN_MAP_DELIM2)
			var value = parseStringAs(reflect.String, items[0])
			var key = value.(string)
			value = parseStringAs(reflect.Uint32, items[1])
			var val = value.(uint32)
			p.Goods[key] = val
		}
	}
	if row[5] != "" {
		p.Description = row[5]
	}
	return nil
}
