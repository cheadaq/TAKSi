// This file is auto-generated by Tabular v0.6.0, DO NOT EDIT!
package config

import (
	"log"
	"strings"
)

var (
	_ = strings.Split
	_ = log.Panicf
)

const (
	TABULAR_CSV_SEP     = `,` // CSV field delimiter
	TABULAR_CSV_QUOTE   = `"` // CSV field quote
	TABULAR_ARRAY_DELIM = `,` // array item delimiter
	TABULAR_MAP_DELIM1  = `;` // map item delimiter
	TABULAR_MAP_DELIM2  = `=` // map key-value delimiter
)

// 全局数值配置, 全局变量表.xlsx
type GlobalPropertyDefine struct {
	GoldExchangeTimeFactor1    float64        // 金币兑换时间参数1
	GoldExchangeTimeFactor2    float64        // 金币兑换时间参数2
	GoldExchangeTimeFactor3    float64        // 金币兑换时间参数3
	GoldExchangeResource1Price uint16         // 金币兑换资源1价格
	GoldExchangeResource2Price uint16         // 金币兑换资源2价格
	GoldExchangeResource3Price uint16         // 金币兑换资源3价格
	GoldExchangeResource4Price uint16         // 金币兑换资源4价格
	FreeCompleteSeconds        uint16         // 免费立即完成时间
	CancelBuildReturnPercent   uint16         // 取消建造后返还资源比例
	EnableSearch               bool           // 开启搜索
	SpawnLevelLimit            []int          // 最大刷新个数显示
	FirstRechargeReward        map[string]int // 首充奖励
}

func (p *GlobalPropertyDefine) ParseFromRows(rows [][]string) error {
	if len(rows) < 12 {
		log.Panicf("GlobalPropertyDefine:row length out of index, %d < 12", len(rows))
	}
	if rows[0][2] != "" {
		var value = parseStringAs("float64", rows[0][2])
		p.GoldExchangeTimeFactor1 = value.(float64)
	}
	if rows[1][2] != "" {
		var value = parseStringAs("float64", rows[1][2])
		p.GoldExchangeTimeFactor2 = value.(float64)
	}
	if rows[2][2] != "" {
		var value = parseStringAs("float64", rows[2][2])
		p.GoldExchangeTimeFactor3 = value.(float64)
	}
	if rows[3][2] != "" {
		var value = parseStringAs("uint16", rows[3][2])
		p.GoldExchangeResource1Price = value.(uint16)
	}
	if rows[4][2] != "" {
		var value = parseStringAs("uint16", rows[4][2])
		p.GoldExchangeResource2Price = value.(uint16)
	}
	if rows[5][2] != "" {
		var value = parseStringAs("uint16", rows[5][2])
		p.GoldExchangeResource3Price = value.(uint16)
	}
	if rows[6][2] != "" {
		var value = parseStringAs("uint16", rows[6][2])
		p.GoldExchangeResource4Price = value.(uint16)
	}
	if rows[7][2] != "" {
		var value = parseStringAs("uint16", rows[7][2])
		p.FreeCompleteSeconds = value.(uint16)
	}
	if rows[8][2] != "" {
		var value = parseStringAs("uint16", rows[8][2])
		p.CancelBuildReturnPercent = value.(uint16)
	}
	if rows[9][2] != "" {
		var value = parseStringAs("bool", rows[9][2])
		p.EnableSearch = value.(bool)
	}
	if rows[10][2] != "" {
		for _, item := range strings.Split(rows[10][2], TABULAR_ARRAY_DELIM) {
			var value = parseStringAs("int", item)
			p.SpawnLevelLimit = append(p.SpawnLevelLimit, value.(int))
		}
	}
	if rows[11][2] != "" {
		p.FirstRechargeReward = map[string]int{}
		for _, text := range strings.Split(rows[11][2], TABULAR_MAP_DELIM1) {
			if text == "" {
				continue
			}
			var items = strings.Split(text, TABULAR_MAP_DELIM2)
			var value = parseStringAs("string", items[0])
			var key = value.(string)
			value = parseStringAs("int", items[1])
			var val = value.(int)
			p.FirstRechargeReward[key] = val
		}
	}
	return nil
}

func (p *GlobalPropertyDefine) Unmarshal(data []byte) error {
	rows, err := ReadCSVRows(data)
	if err != nil {
		log.Printf("GlobalPropertyDefine: csv read all, %v", err)
		return err
	}
	if err := p.ParseFromRows(rows); err != nil {
		log.Printf("GlobalPropertyDefine: parse row %d, %v", len(rows), err)
		return err
	}
	return nil
}
