// This file is auto-generated by Tabular v0.9.1, DO NOT EDIT!

#include "GlobalDefine.h"
#include <stddef.h>
#include <assert.h>
#include <memory>
#include <fstream>
#include "Conv.h"
#include "StringUtil.h"

using namespace std;

#ifndef ASSERT
#define ASSERT assert
#endif


namespace config {

// parse GlobalPropertyDefine from string fields
int GlobalPropertyDefine::ParseFrom(std::unordered_map<std::string, std::string>& fields, GlobalPropertyDefine* ptr)
{
    ASSERT(ptr != nullptr);
    ptr->GoldExchangeTimeFactor1 = ParseDouble(fields["GoldExchangeTimeFactor1"]);
    ptr->GoldExchangeTimeFactor2 = ParseDouble(fields["GoldExchangeTimeFactor2"]);
    ptr->GoldExchangeTimeFactor3 = ParseDouble(fields["GoldExchangeTimeFactor3"]);
    ptr->GoldExchangeResource1Price = ParseUInt16(fields["GoldExchangeResource1Price"]);
    ptr->GoldExchangeResource2Price = ParseUInt16(fields["GoldExchangeResource2Price"]);
    ptr->GoldExchangeResource3Price = ParseUInt16(fields["GoldExchangeResource3Price"]);
    ptr->GoldExchangeResource4Price = ParseUInt16(fields["GoldExchangeResource4Price"]);
    ptr->FreeCompleteSeconds = ParseUInt16(fields["FreeCompleteSeconds"]);
    ptr->CancelBuildReturnPercent = ParseUInt16(fields["CancelBuildReturnPercent"]);
    ptr->EnableSearch = ParseBool(fields["EnableSearch"]);
    {
        auto arr = SplitString(fields["SpawnLevelLimit"], "|");
        for (size_t i = 0; i < arr.size(); i++)
        {
            if (!arr[i].empty()) {
                auto val = ParseInt32(arr[i]);
                ptr->SpawnLevelLimit.emplace_back(val);
            }
        }
    }
    {
        auto kvs = SplitString(fields["FirstRechargeReward"], "|");
        for (size_t i = 0; i < kvs.size(); i++)
        {
            auto kv = SplitString(kvs[i], "=");
            ASSERT(kv.size() == 2);
            if(kv.size() == 2)
            {
                auto key = StripWhitespace(kv[0]);
                auto val = ParseInt32(kv[1]);
                ASSERT(ptr->FirstRechargeReward.count(key) == 0);
                ptr->FirstRechargeReward.emplace(std::make_pair(key, val));
            }
        }
    }
    {
        auto kvs = SplitString(fields["VIPItemReward"], "|");
        for (size_t i = 0; i < kvs.size(); i++)
        {
            auto kv = SplitString(kvs[i], "=");
            ASSERT(kv.size() == 2);
            if(kv.size() == 2)
            {
                auto key = ParseInt32(kv[0]);
                auto val = ParseInt32(kv[1]);
                ASSERT(ptr->VIPItemReward.count(key) == 0);
                ptr->VIPItemReward.emplace(std::make_pair(key, val));
            }
        }
    }
    return 0;
}


} // namespace config 
