// This file is auto-generated by Tabular v0.10.0, DO NOT EDIT!

#include "SoldierDefine.h"
#include <stddef.h>
#include "Conv.h"

using namespace std;

#ifndef ASSERT
#define ASSERT assert
#endif


namespace config {

// parse SoldierPropertyDefine from string fields
int SoldierPropertyDefine::ParseFrom(const unordered_map<string, string>& record, SoldierPropertyDefine* ptr)
{
    ASSERT(ptr != nullptr);
    ptr->Name = parseField<std::string>(record, "Name");
    ptr->Level = parseField<int>(record, "Level");
    ptr->NameID = parseField<std::string>(record, "NameID");
    ptr->BuildingName = parseField<std::string>(record, "BuildingName");
    ptr->BuildingLevel = parseField<uint32_t>(record, "BuildingLevel");
    ptr->RequireSpace = parseField<uint32_t>(record, "RequireSpace");
    ptr->Volume = parseField<uint32_t>(record, "Volume");
    ptr->UpgradeTime = parseField<uint32_t>(record, "UpgradeTime");
    ptr->UpgradeMaterialID = parseField<std::string>(record, "UpgradeMaterialID");
    ptr->UpgradeMaterialNum = parseField<int64_t>(record, "UpgradeMaterialNum");
    ptr->ConsumeMaterial = parseField<std::string>(record, "ConsumeMaterial");
    ptr->ConsumeMaterialNum = parseField<int>(record, "ConsumeMaterialNum");
    ptr->ConsumeTime = parseField<int>(record, "ConsumeTime");
    ptr->Act = parseField<int>(record, "Act");
    ptr->Hp = parseField<int>(record, "Hp");
    ptr->BombLoad = parseField<int16_t>(record, "BombLoad");
    ptr->Hurt = parseField<uint32_t>(record, "Hurt");
    ptr->Duration = parseField<double>(record, "Duration");
    ptr->TriggerInterval = parseField<double>(record, "TriggerInterval");
    ptr->SearchScope = parseField<int16_t>(record, "SearchScope");
    ptr->AtkFrequency = parseField<double>(record, "AtkFrequency");
    ptr->AtkRange = parseField<double>(record, "AtkRange");
    ptr->MovingSpeed = parseField<double>(record, "MovingSpeed");
    ptr->EnableBurn = parseField<bool>(record, "EnableBurn");
    return 0;
}


} // namespace config 
