// This file is auto-generated by Tabular v0.6.9, DO NOT EDIT!

#include "AutogenConfig.h"
#include <stddef.h>
#include <assert.h>
#include <memory>
#include <fstream>
#include <absl/strings/str_split.h>

using namespace std;

#ifndef ASSERT
#define ASSERT assert
#endif


namespace config {

// parse data object from csv rows
int GlobalPropertyDefine::ParseFromRows(const vector<CSVRow>& rows, GlobalPropertyDefine* ptr)
{
    ASSERT(rows.size() >= 12 && rows[0].size() >= 2);
    ASSERT(ptr != nullptr);
    ptr->GoldExchangeTimeFactor1 = parseStrAs<double>(rows[0][2]);
    ptr->GoldExchangeTimeFactor2 = parseStrAs<double>(rows[1][2]);
    ptr->GoldExchangeTimeFactor3 = parseStrAs<double>(rows[2][2]);
    ptr->GoldExchangeResource1Price = parseStrAs<uint16_t>(rows[3][2]);
    ptr->GoldExchangeResource2Price = parseStrAs<uint16_t>(rows[4][2]);
    ptr->GoldExchangeResource3Price = parseStrAs<uint16_t>(rows[5][2]);
    ptr->GoldExchangeResource4Price = parseStrAs<uint16_t>(rows[6][2]);
    ptr->FreeCompleteSeconds = parseStrAs<uint16_t>(rows[7][2]);
    ptr->CancelBuildReturnPercent = parseStrAs<uint16_t>(rows[8][2]);
    ptr->EnableSearch = parseStrAs<bool>(rows[9][2]);
    {
        const std::vector<absl::string_view>& array = absl::StrSplit(rows[10][2], TABULAR_ARRAY_DELIM);
        for (size_t i = 0; i < array.size(); i++)
        {
            ptr->SpawnLevelLimit.push_back(parseStrAs<int>(array[i]));
        }
    }
    {
        const std::vector<absl::string_view>& vec = absl::StrSplit(rows[11][2], TABULAR_MAP_DELIM1);
        for (size_t i = 0; i < vec.size(); i++)
        {
            const std::vector<absl::string_view>& kv = absl::StrSplit(vec[i], TABULAR_MAP_DELIM2);
            ASSERT(kv.size() == 2);
            if(kv.size() == 2)
            {
                const auto& key = parseStrAs<std::string>(kv[0]);
                ASSERT(ptr->FirstRechargeReward.count(key) == 0);
                ptr->FirstRechargeReward[key] = parseStrAs<int>(kv[1]);
            }
        }
    }
    return 0;
}


} // namespace config 
