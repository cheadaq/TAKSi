// This file is auto-generated by TAKSi v1.3.0, DO NOT EDIT!

#include "AutogenConfig.h"
#include <stddef.h>
#include <assert.h>
#include <memory>
#include <fstream>
#include "Utility/Conv.h"
#include "Utility/StringUtil.h"
#include "Utility/CSVReader.h"

using namespace std;

#ifndef ASSERT
#define ASSERT assert
#endif


static const char TAKSI_CSV_SEP = ',';
static const char TAKSI_CSV_QUOTE = '"';
static const char* TAKSI_ARRAY_DELIM = ",";
static const char* TAKSI_MAP_DELIM1 = ";";
static const char* TAKSI_MAP_DELIM2 = "=";

namespace config
{

std::function<std::string(const char*)> AutogenConfigManager::reader = AutogenConfigManager::ReadFileContent;

namespace 
{
    static std::vector<NewbieGuideDefine>* _instance_newbieguidedefine = nullptr;
}

void AutogenConfigManager::LoadAll()
{
    ASSERT(reader);
    NewbieGuideDefine::Load("newbie_guide_define.csv");
}

void AutogenConfigManager::ClearAll()
{
    delete _instance_newbieguidedefine;
    _instance_newbieguidedefine = nullptr;
}


//Load content of an asset file'
std::string AutogenConfigManager::ReadFileContent(const char* filepath)
{
    ASSERT(filepath != nullptr);
    FILE* fp = std::fopen(filepath, "rb");
    if (fp == NULL) {
        return "";
    }
    fseek(fp, 0, SEEK_END);
    long size = ftell(fp);
    fseek(fp, 0, SEEK_SET);
    if (size == 0) {
        fclose(fp);
        return "";
    }
    std::string content;
    fread(&content[0], 1, size, fp);
    fclose(fp);
    return std::move(content);
}


const std::vector<NewbieGuideDefine>* NewbieGuideDefine::GetData()
{
    ASSERT(_instance_newbieguidedefine != nullptr);
    return _instance_newbieguidedefine;
}


// load NewbieGuideDefine data from csv file
int NewbieGuideDefine::Load(const char* filepath)
{
    vector<NewbieGuideDefine>* dataptr = new vector<NewbieGuideDefine>;
    std::string content = AutogenConfigManager::reader(filepath);
    CSVReader reader(TAKSI_CSV_SEP, TAKSI_CSV_QUOTE);
    reader.Parse(content);
    auto rows = reader.GetRows();
    ASSERT(!rows.empty());
    for (size_t i = 0; i < rows.size(); i++)
    {
        auto row = rows[i];
        if (!row.empty())
        {
            NewbieGuideDefine item;
            NewbieGuideDefine::ParseFromRow(row, &item);
            dataptr->push_back(item);
        }
    }
    delete _instance_newbieguidedefine;
    _instance_newbieguidedefine = dataptr;
    return 0;
}

// parse data object from an csv row
int NewbieGuideDefine::ParseFromRow(const vector<StringPiece>& row, NewbieGuideDefine* ptr)
{
    ASSERT(row.size() >= 6);
    ASSERT(ptr != nullptr);
    ptr->Name = ParseTextAs<std::string>(row[0]);
    ptr->Type = ParseTextAs<std::string>(row[1]);
    ptr->Target = ParseTextAs<std::string>(row[2]);
    {
        const auto& array = Split(row[3], TAKSI_ARRAY_DELIM, true);
        for (size_t i = 0; i < array.size(); i++)
        {
            ptr->Accomplishment.push_back(ParseTextAs<int>(array[i]));
        }
    }
    {
        const auto& dict = Split(row[4], TAKSI_MAP_DELIM1, true);
        for (size_t i = 0; i < dict.size(); i++)
        {
            const auto& kv = Split(dict[i], TAKSI_MAP_DELIM2, true);
            ASSERT(kv.size() == 2);
            if(kv.size() == 2)
            {
                const auto& key = ParseTextAs<std::string>(kv[0]);
                ASSERT(ptr->Goods.count(key) == 0);
                ptr->Goods[key] = ParseTextAs<uint32_t>(kv[1]);
            }
        }
    }
    ptr->Description = ParseTextAs<std::string>(row[5]);
    return 0;
}


} // namespace config 
