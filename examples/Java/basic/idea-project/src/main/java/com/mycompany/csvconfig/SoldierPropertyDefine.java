// This file is auto-generated by Tabular v1.4.0, DO NOT EDIT!

package com.mycompany.csvconfig;

import java.util.*;
import java.io.IOException;
import org.apache.commons.csv.*;

// 兵种属性配置, 兵种.xlsx
public class SoldierPropertyDefine
{
    public String   Name = "";                 // 士兵ID
    public int      Level = 0;                 // 士兵等级
    public String   NameID = "";               // 名字
    public String   Description = "";          // 描述
    public String   BuildingName = "";         // 所属建筑
    public int      BuildingLevel = 0;         // 建筑等级
    public int      RequireSpace = 0;          // 登陆艇占用空间
    public int      Volume = 0;                // 体积
    public int      UpgradeTime = 0;           // 升级消耗的时间(秒）
    public String   UpgradeMaterialID = "";    // 升级消耗的材料
    public long     UpgradeMaterialNum = 0;    // 升级消耗的数量
    public String   ConsumeMaterial = "";      // 生产消耗的材料
    public int      ConsumeMaterialNum = 0;    // 生产消耗的数量
    public int      ConsumeTime = 0;           // 生产消耗的时间（秒/个）
    public int      Act = 0;                   // 攻击
    public int      Hp = 0;                    // 血量
    public short    BombLoad = 0;              // 载弹量
    public int      Hurt = 0;                  // buff伤害
    public float    Duration = 0.0f;           // 持续时间
    public float    TriggerInterval = 0.0f;    // 触发间隔
    public short    SearchScope = 0;           // 搜索范围
    public float    AtkFrequency = 0.0f;       // 攻击间隔
    public double   AtkRange = 0.0f;           // 攻击距离
    public double   MovingSpeed = 0.0f;        // 移动速度
    public boolean  EnableBurn = false;        // 燃烧特效

    private static List<SoldierPropertyDefine> data_;
    public static List<SoldierPropertyDefine> getData() { return data_; } 

    // parse fields data from record
    public void parseFrom(CSVRecord record)
    {
        if (record.size() < 25) {
            throw new RuntimeException(String.format("SoldierPropertyDefine: record length too short %d", record.size()));
        }
        if (!record.get(0).isEmpty()) {
            this.Name = record.get(0).trim();
        }
        if (!record.get(1).isEmpty()) {
            this.Level = Integer.parseInt(record.get(1));
        }
        if (!record.get(2).isEmpty()) {
            this.NameID = record.get(2).trim();
        }
        if (!record.get(3).isEmpty()) {
            this.Description = record.get(3).trim();
        }
        if (!record.get(4).isEmpty()) {
            this.BuildingName = record.get(4).trim();
        }
        if (!record.get(5).isEmpty()) {
            this.BuildingLevel = Integer.parseInt(record.get(5));
        }
        if (!record.get(6).isEmpty()) {
            this.RequireSpace = Integer.parseInt(record.get(6));
        }
        if (!record.get(7).isEmpty()) {
            this.Volume = Integer.parseInt(record.get(7));
        }
        if (!record.get(8).isEmpty()) {
            this.UpgradeTime = Integer.parseInt(record.get(8));
        }
        if (!record.get(9).isEmpty()) {
            this.UpgradeMaterialID = record.get(9).trim();
        }
        if (!record.get(10).isEmpty()) {
            this.UpgradeMaterialNum = Long.parseLong(record.get(10));
        }
        if (!record.get(11).isEmpty()) {
            this.ConsumeMaterial = record.get(11).trim();
        }
        if (!record.get(12).isEmpty()) {
            this.ConsumeMaterialNum = Integer.parseInt(record.get(12));
        }
        if (!record.get(13).isEmpty()) {
            this.ConsumeTime = Integer.parseInt(record.get(13));
        }
        if (!record.get(14).isEmpty()) {
            this.Act = Integer.parseInt(record.get(14));
        }
        if (!record.get(15).isEmpty()) {
            this.Hp = Integer.parseInt(record.get(15));
        }
        if (!record.get(16).isEmpty()) {
            this.BombLoad = Short.parseShort(record.get(16));
        }
        if (!record.get(17).isEmpty()) {
            this.Hurt = Integer.parseInt(record.get(17));
        }
        if (!record.get(18).isEmpty()) {
            this.Duration = Float.parseFloat(record.get(18));
        }
        if (!record.get(19).isEmpty()) {
            this.TriggerInterval = Float.parseFloat(record.get(19));
        }
        if (!record.get(20).isEmpty()) {
            this.SearchScope = Short.parseShort(record.get(20));
        }
        if (!record.get(21).isEmpty()) {
            this.AtkFrequency = Float.parseFloat(record.get(21));
        }
        if (!record.get(22).isEmpty()) {
            this.AtkRange = Double.parseDouble(record.get(22));
        }
        if (!record.get(23).isEmpty()) {
            this.MovingSpeed = Double.parseDouble(record.get(23));
        }
        if (!record.get(24).isEmpty()) {
            this.EnableBurn = AutogenConfigManager.parseBool(record.get(24));
        }
    }

    public static void loadFrom(String content) throws IOException
    {
        List<SoldierPropertyDefine> data = new ArrayList<>();
        CSVParser parser = CSVParser.parse(content, CSVFormat.EXCEL);
        for (CSVRecord record : parser)
        {
            if (record.size() == 0)
                continue;
            SoldierPropertyDefine item = new SoldierPropertyDefine();
            item.parseFrom(record);
            data.add(item);
        }
        data_ = data;
    }

    // get an item by key
    public static SoldierPropertyDefine getItem(String Name, int Level)
    {
        for (SoldierPropertyDefine item : data_)
        {
            if (item.Name.equals(Name) && item.Level == Level)
            {
                return item;
            }
        }
        return null;
    }

    // get a range of items by key
    public static ArrayList<SoldierPropertyDefine> getRange(String Name)
    {
        ArrayList<SoldierPropertyDefine> range = new ArrayList<>();
        for (SoldierPropertyDefine item : data_)
        {
            if (item.Name.equals(Name))
            {
                range.add(item);
            }
        }
       return range;
    }
}
