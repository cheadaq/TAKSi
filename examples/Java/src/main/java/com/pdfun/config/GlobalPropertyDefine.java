// This file is auto-generated by Tabugen v0.10.0, DO NOT EDIT!

package com.pdfun.config;

import java.util.*;
import org.apache.commons.lang3.StringUtils;

//  全局变量表.xlsx
public class GlobalPropertyDefine 
{
    public double                GoldExchangeTimeFactor1 = 0.0f;    // 金币兑换时间参数1
    public double                GoldExchangeTimeFactor2 = 0.0f;    // 金币兑换时间参数2
    public double                GoldExchangeTimeFactor3 = 0.0f;    // 金币兑换时间参数3
    public short                 GoldExchangeResource1Price = 0;    // 金币兑换资源1价格
    public short                 GoldExchangeResource2Price = 0;    // 金币兑换资源2价格
    public short                 GoldExchangeResource3Price = 0;    // 金币兑换资源3价格
    public short                 GoldExchangeResource4Price = 0;    // 金币兑换资源4价格
    public short                 FreeCompleteSeconds = 0;           // 免费立即完成时间
    public short                 CancelBuildReturnPercent = 0;      // 取消建造后返还资源比例
    public boolean               EnableSearch = false;              // 开启搜索
    public int[]                 SpawnLevelLimit = null;            // 最大刷新个数显示
    public Map<String,Integer>   FirstRechargeReward = null;        // 首充奖励
    public Map<Integer,Integer>  VIPItemReward = null;              // VIP奖励

    // parse GlobalPropertyDefine from string fields
    public void parseFrom(Map<String, String> fields)
    {
        String strTmp;
        strTmp = fields.get("GoldExchangeTimeFactor1");
        if (StringUtils.isNotEmpty(strTmp)) {
            this.GoldExchangeTimeFactor1 = Double.parseDouble(strTmp);
        }
        strTmp = fields.get("GoldExchangeTimeFactor2");
        if (StringUtils.isNotEmpty(strTmp)) {
            this.GoldExchangeTimeFactor2 = Double.parseDouble(strTmp);
        }
        strTmp = fields.get("GoldExchangeTimeFactor3");
        if (StringUtils.isNotEmpty(strTmp)) {
            this.GoldExchangeTimeFactor3 = Double.parseDouble(strTmp);
        }
        strTmp = fields.get("GoldExchangeResource1Price");
        if (StringUtils.isNotEmpty(strTmp)) {
            this.GoldExchangeResource1Price = Short.parseShort(strTmp);
        }
        strTmp = fields.get("GoldExchangeResource2Price");
        if (StringUtils.isNotEmpty(strTmp)) {
            this.GoldExchangeResource2Price = Short.parseShort(strTmp);
        }
        strTmp = fields.get("GoldExchangeResource3Price");
        if (StringUtils.isNotEmpty(strTmp)) {
            this.GoldExchangeResource3Price = Short.parseShort(strTmp);
        }
        strTmp = fields.get("GoldExchangeResource4Price");
        if (StringUtils.isNotEmpty(strTmp)) {
            this.GoldExchangeResource4Price = Short.parseShort(strTmp);
        }
        strTmp = fields.get("FreeCompleteSeconds");
        if (StringUtils.isNotEmpty(strTmp)) {
            this.FreeCompleteSeconds = Short.parseShort(strTmp);
        }
        strTmp = fields.get("CancelBuildReturnPercent");
        if (StringUtils.isNotEmpty(strTmp)) {
            this.CancelBuildReturnPercent = Short.parseShort(strTmp);
        }
        strTmp = fields.get("EnableSearch");
        if (StringUtils.isNotEmpty(strTmp)) {
            this.EnableSearch = Boolean.parseBoolean(strTmp);
        }
        strTmp = fields.get("SpawnLevelLimit");
        if (StringUtils.isNotEmpty(strTmp)) {
            String[] strArr = StringUtils.split(strTmp, "|");
            this.SpawnLevelLimit = new int[strArr.length];
            for(int i = 0; i < strArr.length; i++) 
            {
                this.SpawnLevelLimit[i] = Integer.parseInt(strArr[i]);
            }
        }
        strTmp = fields.get("FirstRechargeReward");
        if (StringUtils.isNotEmpty(strTmp)) {
            Map<String, Integer> mapVal = new HashMap<>();
            String[] kvList = StringUtils.split(strTmp, "|");
            for(int i = 0; i < kvList.length; i++) 
            {
                String[] pair = kvList[i].split("=");
                if (pair.length == 2) {
                    String key = pair[0].trim();
                    Integer val = Integer.parseInt(pair[1]);
                    mapVal.put(key, val);
                }
            }
            this.FirstRechargeReward = mapVal;
        }
        strTmp = fields.get("VIPItemReward");
        if (StringUtils.isNotEmpty(strTmp)) {
            Map<Integer, Integer> mapVal = new HashMap<>();
            String[] kvList = StringUtils.split(strTmp, "|");
            for(int i = 0; i < kvList.length; i++) 
            {
                String[] pair = kvList[i].split("=");
                if (pair.length == 2) {
                    Integer key = Integer.parseInt(pair[0]);
                    Integer val = Integer.parseInt(pair[1]);
                    mapVal.put(key, val);
                }
            }
            this.VIPItemReward = mapVal;
        }
    }

}
